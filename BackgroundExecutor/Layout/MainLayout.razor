@using BackgroundExecutor.Components
@using BackgroundExecutor.Services
@inherits LayoutComponentBase
@inject IMessageService MessageService
@inject IDialogService DialogService

<FluentLayout>
    <FluentHeader>
        BackgroundExecutor
        <FluentSpacer/>

        <FluentCounterBadge Count="@MessageService.Count(BackgroundExecutor.NotificationSectionName)"
                            Max="9"
                            ShowWhen="@((i)=> MessageService.Count(BackgroundExecutor.NotificationSectionName) > 0)"
                            ShowOverflow="true"
                            BackgroundColor="@Color.Error"
                            Color="Color.Fill"
                            Appearance="Appearance.Accent">
            <ChildContent>
                <FluentButton BackgroundColor="var(--neutral-layer-4)" OnClick="OpenNotificationCenterAsync"
                              Title="Notification center">
                    @NotificationIcon()
                </FluentButton>
            </ChildContent>
        </FluentCounterBadge>

    </FluentHeader>
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <NavMenu/>
        <FluentBodyContent Class="body-content">
            <ErrorBoundary>
                <ChildContent>
                    <div class="content">
                        @Body
                    </div>
                </ChildContent>
                <ErrorContent Context="ex">
                    <div class="blazor-error-boundary">@ex.Message</div>
                </ErrorContent>
            </ErrorBoundary>
        </FluentBodyContent>
    </FluentStack>
    <FluentFooter>
        <a href="https://www.fluentui-blazor.net" target="_blank">Documentation and demos</a>
        <FluentSpacer/>
        <a href="https://learn.microsoft.com/en-us/aspnet/core/blazor" target="_blank">About Blazor</a>
    </FluentFooter>
</FluentLayout>


<FluentDialogProvider/>

@code{

    protected override void OnInitialized()
    {
        MessageService.OnMessageItemsUpdated += UpdateCount;
    }

    private void UpdateCount()
    {
        InvokeAsync(StateHasChanged);
    }

    private RenderFragment NotificationIcon() =>
        @<FluentIcon Value="@(new Icons.Regular.Size20.Alert())" Color="Color.Neutral" Title="Background Tasks"/>;

    private async Task OpenNotificationCenterAsync()
    {
        await DialogService.ShowPanelAsync<NotificationCenterPanel>(new DialogParameters<GlobalState>()
        {
            Alignment = HorizontalAlignment.Right,
            Title = $"Notifications",
            PrimaryAction = null,
            SecondaryAction = null,
            ShowDismiss = true
        });
    }

}